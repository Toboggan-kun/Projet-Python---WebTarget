# NOM DU PROJET         :       WEBTARGET
#
# AUTEURS               :
#                               STEPHANE KY
#                               CHALANA MENG
#                               CAROLINE TANG SONG
# CLASSE                :       3 SRC 3
# DATE                  :       11/01/2019
import tkMessageBox
from Tkinter import *
import os
import re
from tkFileDialog import askopenfilename
import csv
from collections import namedtuple
import scrapy
import validate_email
global labelFrameCampagne
global labelFrameOptions

global labelNumberEmail
#global campagneNameValue
campagneNameValue = ""
labelNumberEmail = ""
cpt = 0 #VERIFIE SI LE LABEL NOM DE CAMPAGNE EST DEJA CREE
cpt2 = 0 #VERIFIE SI LE LABEL NOMBRE DE DESTINATAIRE EST DEJA CREE
numberEmail = 0

class Dyson(scrapy.Spider):
    name = "dyson"

    def start_requests(self):
        urls = [
#            'http://quotes.toscrape.com/page/1/',
#            'http://quotes.toscrape.com/page/2/',
            'http://www.thelin.net/laurent/labo/html/mailto.html',
        ]
        for url in urls:
            yield scrapy.Request(url=url, callback=self.parse)

    def parse(self, response):
        i=0
        mail = []
        page = response.url.split("/")[-2]
        filename = 'dyson-%s.html' % page
#       with open(filename, 'wb') as f:
#           f.write(response.body)
#       self.log('Saved file %s' % filename)
        for line in response.body.splitlines():
            line = line.lower()
            if line.find('href="mailto') == -1:
#                print "%s" % (line)
                print "NO MAIL"
            else:
                print"%s" % (line)
                match = re.search(r'[\w\.-]+@[\w\.-]+',line)
#                print"%s" % (match.group(0))
                str1 = match.group(0)
                mail.append(str1)
                print "MAIL"
                i += 1
        print(mail)
        with open('test.csv','wb') as csvfile:
            filewriter = csv.writer(csvfile, delimiter=',', quotechar='|', quoting= csv.QUOTE_MINIMAL)
            filewriter.writerow(mail)
        print "nombre de mail : %d" % (i)

#MESSAGES D'ALTERTES
def errorMessagesDialog(message):
    tkMessageBox.showerror("Erreur", message)


def infoMessagesDialog(message):
    tkMessageBox.showinfo("Information", message)


def warningMessagesDialog(message):
    tkMessageBox.showwarning("Attention", message)
#MESSAGES D'ALERTES - FIN
#RENDRE DES COMPOSANTS VISIBLES OU NON
def hideComponent(component):
    component.pack_forget()

def showComponent(component, fill, padx, pady):
    component.pack(fill=fill, padx=padx, pady=pady)
#RENDRE DES COMPOSANTS VISIBLES OU NON - FIN

def campagneName(entryValue, createCampagneFrame, importOptionsFrame):
    global cpt
    global campagneNameValue
    #VERIFIE SI UN NOM DE CAMPAGNE A ETE INDIQUE
    #SI NON, AFFICHE UN MESSAGE D'ERREUR
    if len(entryValue.get()) == 0:
        errorMessagesDialog("Votre nom de campagne est vide.")

    #SINON ON AFFICHE L'ETAPE SUIVANTE
    else:
        hideComponent(createCampagneFrame)
        showComponent(importOptionsFrame, "both", 30, 0)
        value = entryCampagne.get()

        if cpt == 0:
            campagneNameValue = Label(window, text="Nom de campagne : " + value)
            campagneNameValue.pack()
            cpt += 1
        else:
            campagneNameValue.config(text="Nom de campgne : " + value)

def addURLDialog():
    global addURLWindow
    addURLWindow = Tk()
    addURLWindow.geometry("200x150")
    label = Label(addURLWindow, text="Veuillez saisir une URL : ")
    entryURL = Entry(addURLWindow)

    label.pack(side=TOP, pady=5)
    entryURL.pack(side=TOP, fill=X, padx=5, pady=5)
    global labelFrameMessage
    labelFrameMessage = LabelFrame(addURLWindow)
    global messageLabel
    messageLabel = Label(labelFrameMessage)
    labelFrameMessage.pack(fill=X, padx=5, pady=5)
    messageLabel.pack()

    buttonUndo = Button(addURLWindow, text="Annuler", command=lambda:addURLWindow.destroy())
    buttonValid = Button(addURLWindow, text="Valider", command=lambda:checkURL(entryURL, messageLabel))
    buttonUndo.pack(side=LEFT, padx=5, pady=5)
    buttonValid.pack(side=RIGHT, padx=5, pady=5)
    addURLWindow.mainloop()

def removeDouble(isChecked, listBox):
    global numberEmail
    global labelNumberEmail

    numberEmail = 0
    global listWithoutDouble

    #SI ON SOUHAITE ENLEVER LES DOUBLONS
    #ON ENREGISTRE LA LISTE INITIALE DANS UNE AUTRE LISTE ET ON RETIRE LES DOUBLONS
    if isChecked.get() == 1:
        listWithoutDouble = Listbox(labelFrameOptions)

        for data in sorted(list(set(listBox.get(0, END)))):
            listWithoutDouble.insert(END, data)
            numberEmail += 1

        hideComponent(listBox)
        #AFFICHE LA NOUVELLE LISTEBOX
        listWithoutDouble.pack(fill="both", padx=5, pady=10)
        labelNumberEmail.config(text="Nombre de destinataires : " + str(numberEmail))

    #SINON : ON REAFFICHE LE TABLEAU INITIAL
    else:
        for data in set(listBox.get(0, END)):
            numberEmail += 1
        labelNumberEmail.config(text="Nombre de destinataires : " + str(numberEmail))
        hideComponent(listWithoutDouble)
        showComponent(listBox, "both", 5, 10)

def checkIsValidMail(listBox): #CETTE METHODE VA PINGER LE NOM DE DOMAINE DU MAIL

    listValidDomain = []
    print listBox.get(0, END)
    for data in list(listBox.get(0, END)):
        dataSplitted = data.split('@')
        toPing = dataSplitted[len(dataSplitted)-1]
        response = os.system("ping -w 5000 -n 1 " + toPing)

        if response == 0:
            print(toPing + " est pingable")
            listValidDomain.append(toPing)  # Recuperation de la derniere partie, apres le @
        else:
            print(toPing + " n'est pas pingable")

    print listValidDomain
    print("Il y a " + str(len(listValidDomain)) + " adresses mail valides")



def addCSVValues(read, listBox):
    val = 0
    Header = namedtuple('Headers', 'EMails')
    if read is not None:
        for data in map(Header._make, read):
            val += 1
            listBox.insert(END, data.EMails)
    else:
        for data in listBox:
            val += 1
            listBox.insert(END, data)
    return val #RETOURNE LE NOMBRE D'EMAILS
def checkURL(url, message):

    #PING L'URL
    response = os.system("ping " + url.get())

    #VERIFIE SI LE LABEL EXISTE DEJA POUR EVITER DE CREER DES DOUBLONS A CHAQUE LANCEMENT DE LA FONCTION
    if message.winfo_exists() == 1:
        print "Existe deja"

    else:
        message = Label(labelFrameMessage, text="Contact en cours avec" + url.get())
        message.pack(side=TOP, fill=X)

    #SI LE PING A FONCTIONNE : FERME LA FENETRE ET AFFICHE LES URLS TROUVEES
    if response == 0:
        addURLWindow.destroy()
    #SINON : AFFICHE UN MESSAGE D'ERREUR
    else:
        message.config(text="Impossible de contacter cet URL")
        message.config(fg="red")
    ifEmpty()

def readCSVFile(listBox):
    global read
    global cpt2
    global labelNumberEmail
    global numberEmail

    numberEmail = 0
    fileName = askopenfilename(initialdir="/", title="Choisir un fichier", filetypes=(("Fichiers CSV","*.csv"),("Tous les fichiers","*.*"))) #OUVRE L'EXPLORATEUR DE FICHIERS
    #SI RIEN N'EST CHOISI, AFFICHAGE D'UN MESSAGE D'INFORMATION
    if len(fileName) == 0:
        infoMessagesDialog("Vous n'avez pas choisi de fichier.")

    else:
        #OUVRE LE FICHIER EN MODE LECTURE BINAIRE
        file = open(fileName, "rb")
        read = csv.reader(file, delimiter=",", quotechar="'")
        numberEmail = addCSVValues(read, listBox)
        if cpt2 == 0:
            labelNumberEmail = Label(window, text="Nombre de destinataires : " + str(numberEmail))
            labelNumberEmail.pack()
        else:
            labelNumberEmail.config(text="Nombre de destinataires : " + str(numberEmail))

    ifEmpty() #CHECK SI LA LISTE EST VIDE

def goToMainPage():
    hideComponent(labelFrameOptions)
    showComponent(labelFrameCampagne, "both", 30, 0)

def ifEmpty():

    if listBox.size() == 0:
        checkDouble.config(state=DISABLED)
        checkIsEmailValid.config(state=DISABLED)
    else:
        checkDouble.config(state=NORMAL)
        checkIsEmailValid.config(state=NORMAL)

class Window:

    #INITIALISATION DE LA FENETRE
    global window
    window = Tk()
    window.geometry("500x500")

    #TITRE PRINCIPAL
    title = Label(window, text="WebTarget")
    title.configure(font=('Calibri', 25, 'bold'))
    title.configure(height=2)
    title.pack(fill="both")

    campagneNameValue = ""
    labelCampagneName = Label(window, text=campagneNameValue)


    #1 - CREATION D'UN FICHIER DE CAMPAGNE
    global labelFrameCampagne

    labelFrameCampagne = LabelFrame(window, text="Creation d'une campagne", height=2)
    labelFrameCampagne.configure(font=('Calibri', 15))
    labelFrameCampagne.configure(height=2)
    labelFrameCampagne.pack(fill="both", padx=30)
    labelCreateCampagne = Label(labelFrameCampagne, text="Veuillez saisir un nom de campagne.")
    labelCreateCampagne.pack()
    global entryCampagne
    entryCampagne = Entry(labelFrameCampagne)
    entryCampagne.pack()


    labelCampagneName.pack()
    buttonCreateCampagne = Button(labelFrameCampagne, text="Valider", command=lambda:campagneName(entryCampagne, labelFrameCampagne, labelFrameOptions))
    buttonCreateCampagne.pack()

    # 1 - CREATION D'UN FICHIER DE CAMPAGNE FIN

    #2 - IMPORT D'EMAILS

    global labelFrameOptions

    labelFrameOptions = LabelFrame(window, text="Creation de votre liste de destinataires")
    labelFrameOptions.configure(font=('Calibri', 13))
    labelFrameOptions.configure()
    labelFrameOptions.pack(fill="both")
    labelFrameOptions.pack_forget()
    global listBox
    listBox = Listbox(labelFrameOptions)


    #CE LABEL VA SERVIR DE BOX POUR LES BOUTONS
    labelButtonBox = Label(labelFrameOptions)
    labelButtonBox.pack(fill=X, padx=0, pady=15)
    buttonImportCSV = Button(labelButtonBox, text="Importer depuis un fichier CSV",
                             command=lambda: readCSVFile(listBox))
    buttonImportURL = Button(labelButtonBox, text="Importer depuis une URL", command=lambda: addURLDialog())
    buttonImportCSV.pack()
    buttonImportURL.pack()
    global isChecked1, isChecked2
    isChecked1 = IntVar()
    isChecked2 = IntVar()
    global checkDouble
    global checkIsEmailValid
    checkDouble = Checkbutton(labelButtonBox, text="Supprimer les doublons", variable=isChecked1, command=lambda:removeDouble(isChecked1, listBox))
    checkIsEmailValid = Checkbutton(labelButtonBox, text="Afficher les emails valides", variable=isChecked2, command=lambda:checkIsValidMail(listBox))

    ifEmpty()

    checkDouble.pack(side=BOTTOM)
    checkIsEmailValid.pack(side=BOTTOM)
    buttonUndo = Button(labelFrameOptions, text="< Retour", command=lambda: goToMainPage())
    buttonContinue = Button(labelFrameOptions, text="Continuer >")

    buttonUndo.pack(side=LEFT)
    buttonContinue.pack(side=RIGHT)

    listBox.pack(fill="both", padx=5, pady=10)


    # 2 - IMPORT D'EMAILS FIN


    window.mainloop()


